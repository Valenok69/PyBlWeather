import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import requests
from typing import Union
import re
import os
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())
API_TOKEN = os.environ.get("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

cities = {
    "–ú–æ—Å–∫–≤–∞": (55.7558, 37.6173),
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": (59.9343, 30.3351),
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": (55.0084, 82.9357),
    "–ö–∞–∑–∞–Ω—å": (55.8304, 49.0661),
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": (56.8389, 60.6057),
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": (56.2965, 43.9361),
    "–£—Ñ–∞": (54.7388, 55.9721)
}

class WeatherStates(StatesGroup):
    start_city = State()
    end_city = State()
    days = State()
@router.message(Command("weather"))
async def weather_command(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é:", reply_markup=city_buttons("start_city"))
    await state.set_state(WeatherStates.start_city)
def get_coordinates(city_name):
    base_url = "https://geocoding-api.open-meteo.com/v1/search"
    request_query = f'?name={city_name}&count=5&language=ru&format=json'

    try:
        response = requests.get(base_url + request_query)
        if response.status_code != 200:
            return None
        else:
            response_json = response.json()
            if 'results' in response_json and len(response_json['results']) != 0:
                lat, lon = response_json['results'][0]['latitude'], response_json['results'][0]['longitude']
                return lat, lon
            else:
                return None
    except Exception as e:
        print("Exception! Error: " + str(e))
        return None

def get_weather(lat, lon, days):
    try:
        url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max&timezone=auto&forecast_days={days}"
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}"

        try:
            data = response.json()
        except json.JSONDecodeError:
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if 'daily' not in data:
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å."

        forecast = data['daily']
        result = []
        for i in range(min(days, len(forecast['time']))):
            date = forecast['time'][i]
            temp_max = forecast['temperature_2m_max'][i]
            temp_min = forecast['temperature_2m_min'][i]
            precipitation = forecast['precipitation_sum'][i]
            windspeed = forecast['windspeed_10m_max'][i]
            result.append(f"""{date}:
            üå°Ô∏è –ú–∞–∫—Å. —Ç–µ–º–ø: {temp_max}¬∞C
            ‚ùÑÔ∏è –ú–∏–Ω. —Ç–µ–º–ø: {temp_min}¬∞C
            üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation} –º–º
            üí® –í–µ—Ç–µ—Ä: {windspeed} –∫–º/—á\n""")
        return "\n".join(result)
    except requests.exceptions.Timeout:
        return "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except requests.exceptions.RequestException as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã", callback_data="start_weather")]
        ]
    )
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞.", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "start_weather")
async def start_weather(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é:",
                                  reply_markup=city_buttons("start_city"))
    await state.set_state(WeatherStates.start_city)
@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏\n"
        "/weather - —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞\n\n"
        "üìç **–í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:**\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É.\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.\n\n"
        "üå¶Ô∏è **–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:**\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\n\n"
    )
    await message.answer(help_text, parse_mode="Markdown")

def city_buttons(prefix):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=city, callback_data=f"{prefix}:{city}")] for city in cities]
    )
def days_buttons(prefix):
    return InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text=str(i), callback_data=f"days:{i}")] for i in range(1, 8)]
    )
@router.callback_query(F.data.startswith("start_city:"))
async def set_start_city_callback(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split(":")[1]
    coords = cities[city]
    await state.update_data(start_city=(city, coords))
    await callback.message.answer(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {city}")
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:", reply_markup=city_buttons("end_city"))
    await state.set_state(WeatherStates.end_city)

@router.message(WeatherStates.start_city)
async def set_start_city_text(message: types.Message, state: FSMContext):
    city = message.text
    coords = get_coordinates(city)
    if not coords:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(start_city=(city, coords))
    await message.answer(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {city}")
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:", reply_markup=city_buttons("end_city"))
    await state.set_state(WeatherStates.end_city)
"""
@router.message(WeatherStates.days)
async def select_days(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        days = int(message.text)
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(days=days)
    data = await state.get_data()
    start_city, start_coords = data['start_city']
    end_city, end_coords = data['end_city']

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    start_weather = get_weather(*start_coords, days)
    end_weather = get_weather(*end_coords, days)

    await message.answer(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {start_city} –Ω–∞ {days} –¥–Ω–µ–π:\n{start_weather}\n (Àµ ‚Ä¢ÃÄ ·¥ó - Àµ ) ‚úß")
    await message.answer(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {end_city} –Ω–∞ {days} –¥–Ω–µ–π:\n{end_weather}\n(‡´≠ ÔΩ°‚Ä¢ÃÄ ·µï ‚Ä¢ÃÅÔΩ° )‡´≠")
    await state.clear()
"""
@router.callback_query(F.data.startswith("end_city:"))
async def select_end_city_callback(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split(":")[1]
    coords = get_coordinates(city)
    if not coords:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(end_city=(city, coords))
    await callback.message.answer(f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {city}")
    await callback.message.answer("–£–∫–∞–∂–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–≤ –¥–Ω—è—Ö):", reply_markup=days_buttons("days"))
    await state.set_state(WeatherStates.days)
@router.message(WeatherStates.end_city)
async def select_end_city_manual(message: types.Message, state: FSMContext):
    city = message.text
    coords = get_coordinates(city)
    if not coords:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(end_city=(city, coords))
    await message.answer(f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {city}")
    await message.answer("–£–∫–∞–∂–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–≤ –¥–Ω—è—Ö):", reply_markup=days_buttons("days"))
    await state.set_state(WeatherStates.days)
@router.callback_query(F.data.startswith("days:"))
async def set_days_callback(callback: CallbackQuery, state: FSMContext):
    days = int(callback.data.split(":")[1])
    await process_days_input(callback.message, state, days)

@router.message(WeatherStates.days)
async def set_days_manual(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        return
    await process_days_input(message, state, days)

async def process_days_input(message, state, days):
    await state.update_data(days=days)
    data = await state.get_data()
    start_city, start_coords = data['start_city']
    end_city, end_coords = data['end_city']
    start_weather = get_weather(*start_coords, days)
    end_weather = get_weather(*end_coords, days)
    await message.answer(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {start_city} –Ω–∞ {days} –¥–Ω–µ–π:\n{start_weather}\n (Àµ ‚Ä¢ÃÄ ·¥ó - Àµ ) ‚úß")
    await message.answer(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {end_city} –Ω–∞ {days} –¥–Ω–µ–π:\n{end_weather}\n(‡´≠ ÔΩ°‚Ä¢ÃÄ ·µï ‚Ä¢ÃÅÔΩ° )‡´≠")
    await state.clear()
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
